import tkinter as tk
from tkinter import ttk
from voice_changer import VoiceChanger
import threading
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import json
import os
from elevenlabs import voices

class VoiceChangerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Voice Changer")
        self.voice_changer = None
        self.load_config()
        self.setup_ui()
        self.setup_audio_monitor()
        
    def load_config(self):
        """Load configuration from file if it exists"""
        self.config = {
            'api_key': '',
            'voice_id': ''
        }
        config_path = 'config.json'
        if os.path.exists(config_path):
            try:
                with open(config_path, 'r') as f:
                    self.config = json.load(f)
            except Exception as e:
                print(f"Error loading config: {e}")
                
    def save_config(self):
        """Save configuration to file"""
        config_path = 'config.json'
        try:
            with open(config_path, 'w') as f:
                json.dump(self.config, f)
        except Exception as e:
            print(f"Error saving config: {e}")
        
    def setup_ui(self):
        frame = ttk.Frame(self.root, padding="10")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # ElevenLabs API Key
        ttk.Label(frame, text="ElevenLabs API Key:").grid(row=0, column=0, padx=5, pady=5)
        self.api_key = ttk.Entry(frame, width=40, show="*")  # Hide API key
        self.api_key.insert(0, self.config.get('api_key', ''))
        self.api_key.grid(row=0, column=1, padx=5, pady=5)
        
        # Show/Hide API Key button
        self.show_api = tk.BooleanVar()
        ttk.Checkbutton(frame, text="Show", variable=self.show_api, 
                       command=self.toggle_api_visibility).grid(row=0, column=2)
        
        # Voice ID selection
        ttk.Label(frame, text="Voice ID:").grid(row=1, column=0, padx=5, pady=5)
        self.voice_id = ttk.Entry(frame, width=40)
        self.voice_id.insert(0, self.config.get('voice_id', ''))
        self.voice_id.grid(row=1, column=1, padx=5, pady=5)
        
        # Control buttons
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=2, column=0, columnspan=3, pady=10)
        
        self.start_button = ttk.Button(button_frame, text="Start", command=self.start_voice_changer)
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="Stop", 
                                    command=self.stop_voice_changer, 
                                    state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # Save config button
        self.save_button = ttk.Button(button_frame, text="Save Settings", 
                                    command=self.save_settings)
        self.save_button.pack(side=tk.LEFT, padx=5)
        
        # Status indicator
        self.status_label = ttk.Label(frame, text="Status: Stopped")
        self.status_label.grid(row=3, column=0, columnspan=3, pady=5)
        
    def toggle_api_visibility(self):
        """Toggle API key visibility"""
        self.api_key.config(show="" if self.show_api.get() else "*")
        
    def save_settings(self):
        """Save current settings"""
        self.config['api_key'] = self.api_key.get()
        self.config['voice_id'] = self.voice_id.get()
        self.save_config()
        self.status_label.config(text="Status: Settings saved")
        
    def setup_audio_monitor(self):
        """Setup audio level monitoring"""
        self.fig, self.ax = plt.subplots(figsize=(4, 1))
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.root)
        self.canvas.get_tk_widget().grid(row=1, column=0)
        
        self.line, = self.ax.plot(np.zeros(100))
        self.ax.set_ylim(-1, 1)
        self.ax.set_xticks([])
        self.ax.set_yticks([])
        self.ax.set_title("Audio Level")
        
    def update_audio_monitor(self, audio_data):
        """Update the audio level visualization"""
        self.line.set_ydata(audio_data)
        self.canvas.draw()
        
    def start_voice_changer(self):
        api_key = self.api_key.get()
        voice_selection = self.voice_var.get()
        
        if not api_key or not voice_selection:
            self.status_label.config(text="Status: Missing API Key or Voice selection")
            return
        
        # Extract voice ID from selection
        voice_id = voice_selection.split('(')[-1].strip(')')
        
        self.voice_changer = VoiceChanger(voice_id=voice_id, api_key=api_key)
        
        # Start voice changer in a separate thread
        self.voice_thread = threading.Thread(target=self.voice_changer.run)
        self.voice_thread.start()
        
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.status_label.config(text="Status: Running")
        
    def stop_voice_changer(self):
        if self.voice_changer:
            self.voice_changer.stop_recording()
            self.voice_thread.join()
            self.voice_changer = None
            
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.status_label.config(text="Status: Stopped")

    def setup_voice_selection(self, frame):
        """Setup voice selection dropdown"""
        ttk.Label(frame, text="Voice:").grid(row=1, column=0, padx=5, pady=5)
        
        # Get available voices
        try:
            self.available_voices = voices()
            voice_names = [f"{v.name} ({v.voice_id})" for v in self.available_voices]
        except Exception as e:
            print(f"Error fetching voices: {e}")
            voice_names = []
        
        self.voice_var = tk.StringVar()
        self.voice_dropdown = ttk.Combobox(frame, textvariable=self.voice_var, 
                                         values=voice_names, width=37)
        self.voice_dropdown.grid(row=1, column=1, padx=5, pady=5)
        
        # Set saved voice if available
        if self.config.get('voice_id'):
            for voice in voice_names:
                if self.config['voice_id'] in voice:
                    self.voice_dropdown.set(voice)
                    break

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceChangerGUI(root)
    root.mainloop() 
